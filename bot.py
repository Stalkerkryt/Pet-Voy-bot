import asyncio
import logging
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
last_feed_time = {}

# –í–∞—à —á–∞—Ç ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram (–Ω–∞–π–¥–∏ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID)
CHAT_ID = "1080331499"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram
def send_log(message):
    url = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
    payload = {'chat_id': CHAT_ID, 'text': message}
    requests.post(url, data=payload)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(message)s',  # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
)

logger = logging.getLogger()
logger.setLevel(logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
animal_choice_kb = ReplyKeyboardMarkup(
    keyboard=[ [KeyboardButton(text="üê± –ö–æ—Ç"), KeyboardButton(text="üê∂ –°–æ–±–∞–∫–∞")], ],
    resize_keyboard=True
)

feeding_interval_kb = ReplyKeyboardMarkup(
    keyboard=[ [KeyboardButton(text="–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"), KeyboardButton(text="–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞")], 
              [KeyboardButton(text="–ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞"), KeyboardButton(text="–ö–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤")] ],
    resize_keyboard=True
)

feeding_times_kb = ReplyKeyboardMarkup(
    keyboard=[ [KeyboardButton(text="3 —Ä–∞–∑–∞"), KeyboardButton(text="4 —Ä–∞–∑–∞")], 
              [KeyboardButton(text="5 —Ä–∞–∑"), KeyboardButton(text="6 —Ä–∞–∑")] ],
    resize_keyboard=True
)

confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞")]],
    resize_keyboard=True
)

main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[ [KeyboardButton(text="/status"), KeyboardButton(text="/help")], 
              [KeyboardButton(text="/reset"), KeyboardButton(text="/stop")] ],
    resize_keyboard=True
)

confirm_reset_kb = ReplyKeyboardMarkup(
    keyboard=[ [KeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")] ],
    resize_keyboard=True
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def log_message(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    text = message.text
    logger.info(f"User {user_name} (ID: {user_id}) sent a message: {text}")
    send_log(f"User {user_name} (ID: {user_id}) sent a message: {text}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    if user_id in user_data:
        await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        return
    user_data[user_id] = {"animal": None, "interval": None, "feed_times": [], "daily_limit": None, "active": True}
    user_data[user_id]["active"] = True
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —É—Ö–∞–∂–∏–≤–∞—Ç—å:", reply_markup=animal_choice_kb)

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: Message):
    user_id = message.from_user.id
    await message.answer(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/status - –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    )

# –ö–æ–º–∞–Ω–¥–∞ /status
@dp.message(Command("status"))
async def show_status(message: Message):
    user_id = message.from_user.id
    if not user_data[user_id]["feed_times"]:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –∫–æ—Ç –µ—â—ë –Ω–µ –µ–ª. üòø")
        return
    feed_times = [t.strftime('%H:%M') for t in user_data[user_id]["feed_times"]]
    await message.answer(f"üçΩ –ö–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join([f"üïô {t}" for t in feed_times]))

# –ö–æ–º–∞–Ω–¥–∞ /reset
@dp.message(Command("reset"))
async def reset_confirm(message: Message):
    await message.answer("‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?\n–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–Ω—ë—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=confirm_reset_kb)

@dp.message(lambda message: message.text == "‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å")
async def reset_bot(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {"animal": None, "interval": None, "feed_times": [], "daily_limit": None, "active": True}
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã! üåÄ –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:", reply_markup=animal_choice_kb)

@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_reset(message: Message):
    await message.answer("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_kb)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text == "‚úÖ –ü–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞")
async def confirm_feeding(message: Message):
    user_id = message.from_user.id
    now = datetime.now().replace(second=0, microsecond=0)

    if user_id in last_feed_time and now - last_feed_time[user_id] < timedelta(seconds=5):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –Ω–∞–∂–∞—Ç–∏–µ–º.")
        return

    last_feed_time[user_id] = now

    if len(user_data[user_id]["feed_times"]) >= user_data[user_id]["daily_limit"]:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –∫–æ—Ç —É–∂–µ –µ–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! üê± –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞.")
        return

    user_data[user_id]["feed_times"].append(now)
    await message.answer(f"–ó–∞–ø–∏—Å–∞–ª! –ö–æ—Ç –±—ã–ª –Ω–∞–∫–æ—Ä–º–ª–µ–Ω –≤ {now.strftime('%H:%M')}.", reply_markup=confirm_kb)

# –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def schedule_feeding_reminder(user_id):
    while True:
        await asyncio.sleep(60)
        if not user_data[user_id]["active"]:
            continue
        if user_data[user_id]["interval"] is None or user_data[user_id]["daily_limit"] is None:
            continue
        now = datetime.now()
        feed_times = user_data[user_id]["feed_times"]

        if not feed_times:
            user_data[user_id]["feed_times"].append(now)
            await bot.send_message(user_id, "–í—Ä–µ–º—è –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞! üê±ü•£", reply_markup=confirm_kb)
            continue

        if len(feed_times) >= user_data[user_id]["daily_limit"]:
            continue

        last_feed_time = feed_times[-1]
        if now - last_feed_time >= timedelta(hours=user_data[user_id]["interval"]):
            user_data[user_id]["feed_times"].append(now)
            await bot.send_message(user_id, "–í—Ä–µ–º—è –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞! üê±ü•£", reply_markup=confirm_kb)

        if now.hour == 0 and now.minute == 0:
            user_data[user_id]["feed_times"] = []
            await bot.send_message(user_id, "üåÖ –ù–æ–≤—ã–π –¥–µ–Ω—å! –ù–µ –∑–∞–±—É–¥—å –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞.", reply_markup=confirm_kb)

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
