import asyncio
import logging
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ë–î)
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è
feeding_interval_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"), KeyboardButton(text="–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞")],
        [KeyboardButton(text="–ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞"), KeyboardButton(text="–ö–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞")]],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        "interval": None,
        "feed_times": []
    }
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞?", reply_markup=feeding_interval_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text.startswith("–ö–∞–∂–¥—ã–µ "))
async def set_feeding_interval(message: Message):
    user_id = message.from_user.id
    interval = int(message.text.split()[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ "–ö–∞–∂–¥—ã–µ X —á–∞—Å–æ–≤"
    user_data[user_id]["interval"] = interval
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–∞.", reply_markup=confirm_kb)
    await schedule_feeding_reminder(user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text == "‚úÖ –ü–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞")
async def confirm_feeding(message: Message):
    user_id = message.from_user.id
    now = datetime.now()

    # –ï—Å–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ, —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫
    if "feed_times" not in user_data[user_id]:
        user_data[user_id]["feed_times"] = []

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
    user_data[user_id]["feed_times"].append(now)

    await message.answer(f"–ó–∞–ø–∏—Å–∞–ª! –ö–æ—Ç –±—ã–ª –Ω–∞–∫–æ—Ä–º–ª–µ–Ω –≤ {now.strftime('%H:%M')}.", reply_markup=confirm_kb)

# –ö–æ–º–∞–Ω–¥–∞ /status (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å)
@dp.message(Command("status"))
async def show_status(message: Message):
    user_id = message.from_user.id
    if "feed_times" not in user_data[user_id] or not user_data[user_id]["feed_times"]:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –∫–æ—Ç –µ—â—ë –Ω–µ –µ–ª. üòø")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–º–ª–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
    feed_times = [t.strftime('%H:%M') for t in user_data[user_id]["feed_times"]]
    await message.answer(f"üçΩ –ö–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join([f"üïô {t}" for t in feed_times]))

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
async def schedule_feeding_reminder(user_id):
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

        if user_id not in user_data or user_data[user_id]["interval"] is None:
            continue  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        now = datetime.now()
        feed_times = user_data[user_id]["feed_times"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
        if feed_times and (now - feed_times[-1]) < timedelta(hours=user_data[user_id]["interval"]):
            continue  # –ï—Å–ª–∏ –∫–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –µ–ª, –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await bot.send_message(user_id, "–í—Ä–µ–º—è –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞! üê±ü•£", reply_markup=confirm_kb)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
