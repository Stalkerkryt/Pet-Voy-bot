import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_pets = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
choose_pet_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üê± –ö–æ—Ç"), KeyboardButton(text="üê∂ –°–æ–±–∞–∫–∞")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —É—Ö–∞–∂–∏–≤–∞—Ç—å:", reply_markup=choose_pet_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
@dp.message(lambda message: message.text in ["üê± –ö–æ—Ç", "üê∂ –°–æ–±–∞–∫–∞"])
async def choose_pet(message: Message):
    user_pets[message.from_user.id] = message.text  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == "üê± –ö–æ—Ç":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ç–∞! üê± –¢–µ–ø–µ—Ä—å —è –ø–æ–º–æ–≥—É –≤–∞–º —Å —É—Ö–æ–¥–æ–º –∑–∞ –Ω–∏–º.")
    else:
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–±–∞–∫—É! üê∂ –ü–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Å–æ–±–∞–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
