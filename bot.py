import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
animal_kb = ReplyKeyboardMarkup(resize_keyboard=True)
animal_kb.add(KeyboardButton("üê± –ö–æ—Ç"))
animal_kb.add(KeyboardButton("üê∂ –°–æ–±–∞–∫–∞"))

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
confirm_kb = ReplyKeyboardMarkup(resize_keyboard=True)
confirm_kb.add(KeyboardButton("‚úÖ –ü–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞"))

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        "animal": None,
        "pet_name": None,
        "interval": None,
        "daily_limit": None,
        "feed_times": [],
        "just_reminded": False,
        "active": True
    }
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —É—Ö–∞–∂–∏–≤–∞—Ç—å:", reply_markup=animal_kb)

# –í—ã–±–æ—Ä –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
@dp.message(lambda message: message.text in ["üê± –ö–æ—Ç", "üê∂ –°–æ–±–∞–∫–∞"])
async def choose_animal(message: types.Message):
    user_id = message.from_user.id
    animal = "–∫–æ—Ç" if "–ö–æ—Ç" in message.text else "—Å–æ–±–∞–∫–∞"
    user_data[user_id]["animal"] = animal
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {animal}! üêæ –¢–µ–ø–µ—Ä—å —è –ø–æ–º–æ–≥—É –≤–∞–º —Å —É—Ö–æ–¥–æ–º –∑–∞ –Ω–∏–º.\n–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?")

# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞
@dp.message(lambda message: message.text)
async def set_pet_name(message: types.Message):
    user_id = message.from_user.id
    if user_data[user_id]["pet_name"] is None:
        user_data[user_id]["pet_name"] = message.text.strip()
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –ø—Ä–æ {user_data[user_id]['pet_name']}!\n–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –∫–æ—Ä–º–∏—Ç—å?")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4):")

# –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text.isdigit())
async def choose_interval(message: types.Message):
    user_id = message.from_user.id
    interval = int(message.text)
    user_data[user_id]["interval"] = interval
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4):")

# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å
@dp.message(lambda message: message.text.isdigit())
async def choose_daily_limit(message: types.Message):
    user_id = message.from_user.id
    daily_limit = int(message.text)
    user_data[user_id]["daily_limit"] = daily_limit
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å {daily_limit} —Ä–∞–∑ –≤ –¥–µ–Ω—å.")

    # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await schedule_feeding_reminder(user_id)

# –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def schedule_feeding_reminder(user_id):
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        if not user_data[user_id]["active"]:
            continue  # –ï—Å–ª–∏ –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        if user_data[user_id]["interval"] is None or user_data[user_id]["daily_limit"] is None:
            continue  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        now = datetime.now()
        feed_times = user_data[user_id]["feed_times"]

        # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É
        if not feed_times:
            await bot.send_message(user_id, f"–í—Ä–µ–º—è –ø–æ–∫–æ—Ä–º–∏—Ç—å {user_data[user_id]['pet_name']}! üê±ü•£", reply_markup=confirm_kb)
            user_data[user_id]["feed_times"].append(now)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä–º–∏–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–∏—Ç–æ–º—Ü–∞ –≤–æ–≤—Ä–µ–º—è
        last_feed_time = feed_times[-1]
        time_since_last = (now - last_feed_time).total_seconds() / 60  # –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö

        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ‚Äì –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if len(feed_times) >= user_data[user_id]["daily_limit"]:
            continue  # –õ–∏–º–∏—Ç –∫–æ—Ä–º–ª–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äì –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å

        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
        if time_since_last >= user_data[user_id]["interval"] * 60:
            await bot.send_message(user_id, f"–í—Ä–µ–º—è –ø–æ–∫–æ—Ä–º–∏—Ç—å {user_data[user_id]['pet_name']}! üê±ü•£", reply_markup=confirm_kb)
            user_data[user_id]["feed_times"].append(now)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

        # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –ø–æ–∫–æ—Ä–º–∏–ª –≤–æ–≤—Ä–µ–º—è ‚Äì –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        elif time_since_last >= 10 and not user_data[user_id]["just_reminded"]:
            await bot.send_message(user_id, f"‚è≥ –ù–µ –∑–∞–±—É–¥—å –ø–æ–∫–æ—Ä–º–∏—Ç—å {user_data[user_id]['pet_name']}! üê±ü•£", reply_markup=confirm_kb)
            user_data[user_id]["just_reminded"] = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

        # –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä–º–∏—Ç –ø–∏—Ç–æ–º—Ü–∞ ‚Äì —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if user_data[user_id]["just_reminded"] and len(feed_times) > 0:
            user_data[user_id]["just_reminded"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
@dp.message(lambda message: message.text == "‚úÖ –ü–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞")
async def confirm_feeding(message: types.Message):
    user_id = message.from_user.id
    now = datetime.now().replace(second=0, microsecond=0)

    # –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–µ–Ω—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    if user_data[user_id]["daily_limit"] is None:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π. üõ† –ò—Å–ø–æ–ª—å–∑—É–π /start")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–∂–∞—Ç–∏–π (–∞–Ω—Ç–∏-—Å–ø–∞–º)
    if user_data[user_id]["feed_times"]:
        last_feed_time = user_data[user_id]["feed_times"][-1]
        time_since_last = (now - last_feed_time).total_seconds() / 60  # –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö

        if time_since_last < 10:  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 10 –º–∏–Ω—É—Ç
            await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º!")
            return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ
    user_data[user_id]["feed_times"].append(now)
    await message.answer(f"–ó–∞–ø–∏—Å–∞–ª! {user_data[user_id]['pet_name']} –±—ã–ª –Ω–∞–∫–æ—Ä–º–ª–µ–Ω –≤ {now.strftime('%H:%M')}.", reply_markup=confirm_kb)

# –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
@dp.message(lambda message: message.text == "/reset")
async def reset_settings(message: types.Message):
    user_id = message.from_user.id

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?\n–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–Ω—ë—Ç –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
@dp.message(lambda message: message.text == "‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å")
async def confirm_reset(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    user_data[user_id] = {
        "active": False,
        "animal": None,
        "pet_name": None,
        "interval": None,
        "daily_limit": None,
        "feed_times": [],
        "just_reminded": False,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    }

    await message.answer("üåÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã! üîÑ –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:", reply_markup=animal_kb)

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
