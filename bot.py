import asyncio
import logging
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
last_feed_time = {}  # –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è

# Telegram ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
USER_ID = 1080331499  # –í–∞—à user_id

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
animal_choice_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üê± –ö–æ—Ç"), KeyboardButton(text="üê∂ –°–æ–±–∞–∫–∞")],
    ],
    resize_keyboard=True
)

feeding_interval_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"), KeyboardButton(text="–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞")],
        [KeyboardButton(text="–ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞"), KeyboardButton(text="–ö–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤")]
    ],
    resize_keyboard=True
)

feeding_times_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="3 —Ä–∞–∑–∞"), KeyboardButton(text="4 —Ä–∞–∑–∞")],
        [KeyboardButton(text="5 —Ä–∞–∑"), KeyboardButton(text="6 —Ä–∞–∑")]
    ],
    resize_keyboard=True
)

confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞")]],
    resize_keyboard=True
)

main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/status"), KeyboardButton(text="/help")],
        [KeyboardButton(text="/reset"), KeyboardButton(text="/stop")]
    ],
    resize_keyboard=True
)

confirm_reset_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ Telegram
async def send_log_to_telegram(message):
    try:
        await bot.send_message(USER_ID, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤ –≤ Telegram: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    if user_id in user_data:
        await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        return
    user_data[user_id] = {"animal": None, "interval": None, "feed_times": [], "daily_limit": None, "active": True}
    user_data[user_id]["active"] = True
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —É—Ö–∞–∂–∏–≤–∞—Ç—å:", reply_markup=animal_choice_kb)
    await send_log_to_telegram(f"New user started interaction: {user_id}")

# –í—ã–±–æ—Ä –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
@dp.message(lambda message: message.text in ["üê± –ö–æ—Ç", "üê∂ –°–æ–±–∞–∫–∞"])
async def set_animal(message: Message):
    user_id = message.from_user.id
    animal = "–∫–æ—Ç" if "–ö–æ—Ç" in message.text else "—Å–æ–±–∞–∫–∞"
    user_data[user_id]["animal"] = animal
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {animal}! üêæ –¢–µ–ø–µ—Ä—å —è –ø–æ–º–æ–≥—É –≤–∞–º —Å —É—Ö–æ–¥–æ–º –∑–∞ –Ω–∏–º.\n–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –∫–æ—Ä–º–∏—Ç—å?", reply_markup=feeding_interval_kb)
    await send_log_to_telegram(f"User {user_id} chose animal: {animal}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text.startswith("–ö–∞–∂–¥—ã–µ "))
async def set_feeding_interval(message: Message):
    user_id = message.from_user.id
    interval = int(message.text.split()[1])
    user_data[user_id]["interval"] = interval
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –∫–æ—Ä–º–∏—Ç—å.", reply_markup=feeding_times_kb)
    await send_log_to_telegram(f"User {user_id} set feeding interval: {interval} hours")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–º–ª–µ–Ω–∏–π
@dp.message(lambda message: message.text in ["3 —Ä–∞–∑–∞", "4 —Ä–∞–∑–∞", "5 —Ä–∞–∑", "6 —Ä–∞–∑"])
async def set_daily_limit(message: Message):
    user_id = message.from_user.id
    limit = int(message.text.split()[0])
    user_data[user_id]["daily_limit"] = limit
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å {limit} —Ä–∞–∑ –≤ –¥–µ–Ω—å.", reply_markup=main_menu_kb)
    await bot.send_message(user_id, "–í—Ä–µ–º—è –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞! üê±ü•£", reply_markup=confirm_kb)
    await send_log_to_telegram(f"User {user_id} set daily feeding limit: {limit} times")
    await schedule_feeding_reminder(user_id)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text == "‚úÖ –ü–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞")
async def confirm_feeding(message: Message):
    user_id = message.from_user.id
    now = datetime.now().replace(second=0, microsecond=0)

    if user_id in last_feed_time and now - last_feed_time[user_id] < timedelta(seconds=5):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –Ω–∞–∂–∞—Ç–∏–µ–º.")
        return

    last_feed_time[user_id] = now

    if len(user_data[user_id]["feed_times"]) >= user_data[user_id]["daily_limit"]:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –∫–æ—Ç —É–∂–µ –µ–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! üê± –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞.")
        return

    user_data[user_id]["feed_times"].append(now)
    await message.answer(f"–ó–∞–ø–∏—Å–∞–ª! –ö–æ—Ç –±—ã–ª –Ω–∞–∫–æ—Ä–º–ª–µ–Ω –≤ {now.strftime('%H:%M')}.", reply_markup=confirm_kb)
    await send_log_to_telegram(f"User {user_id} fed the animal at {now.strftime('%H:%M')}")

# –ö–æ–º–∞–Ω–¥–∞ /status
@dp.message(Command("status"))
async def show_status(message: Message):
    user_id = message.from_user.id
    if not user_data[user_id]["feed_times"]:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –∫–æ—Ç –µ—â—ë –Ω–µ –µ–ª. üòø")
        return

    feed_times = [t.strftime('%H:%M') for t in user_data[user_id]["feed_times"]]
    await message.answer(f"üçΩ –ö–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join([f"üïô {t}" for t in feed_times]))
    await send_log_to_telegram(f"User {user_id} requested status")

# –ö–æ–º–∞–Ω–¥–∞ /reset
@dp.message(Command("reset"))
async def reset_confirm(message: Message):
    await message.answer("‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?\n–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–Ω—ë—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=confirm_reset_kb)
    await send_log_to_telegram(f"User {message.from_user.id} requested reset")

@dp.message(lambda message: message.text == "‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å")
async def reset_bot(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {"animal": None, "interval": None, "feed_times": [], "daily_limit": None, "active": True}
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã! üåÄ –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:", reply_markup=animal_choice_kb)
    await send_log_to_telegram(f"User {user_id} reset settings")

@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_reset(message: Message):
    await message.answer("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_kb)

# –ö–æ–º–∞–Ω–¥–∞ /stop
@dp.message(Command("stop"))
async def stop_bot(message: Message):
    user_id = message.from_user.id
    user_data[user_id]["active"] = False
    await message.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.", reply_markup=main_menu_kb)

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/status - –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    )

# –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def schedule_feeding_reminder(user_id):
    while True:
        await asyncio.sleep(60)

        if not user_data[user_id]["active"]:
            continue  

        if user_data[user_id]["interval"] is None or user_data[user_id]["daily_limit"] is None:
            continue  

        now = datetime.now()
        feed_times = user_data[user_id]["feed_times"]

        if not feed_times:
            user_data[user_id]["feed_times"].append(now)
            await bot.send_message(user_id, "–í—Ä–µ–º—è –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞! üê±ü•£", reply_markup=confirm_kb)
            continue  

        if len(feed_times) >= user_data[user_id]["daily_limit"]:
            continue  

        last_feed_time = feed_times[-1]
        if now - last_feed_time >= timedelta(hours=user_data[user_id]["interval"]):
            user_data[user_id]["feed_times"].append(now)
            await bot.send_message(user_id, "–í—Ä–µ–º—è –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞! üê±ü•£", reply_markup=confirm_kb)

        if now.hour == 0 and now.minute == 0:
            user_data[user_id]["feed_times"] = []
            await bot.send_message(user_id, "üåÖ –ù–æ–≤—ã–π –¥–µ–Ω—å! –ù–µ –∑–∞–±—É–¥—å –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞.", reply_markup=confirm_kb)

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
